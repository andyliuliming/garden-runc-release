#!/usr/bin/env bash

set -e

source /var/vcap/jobs/garden/bin/envs
source /var/vcap/packages/greenskeeper/bin/system-preparation

mkdir -p "$MONIT_DIR"
exec 1>> "${MONIT_DIR}/garden.out.log"
exec 2>> "${MONIT_DIR}/garden.err.log"

/var/vcap/packages/greenskeeper/bin/greenskeeper

rm -f "$RUNTIME_BIN_DIR"/init
cp /var/vcap/packages/guardian/bin/init "$RUNTIME_BIN_DIR"/init

permit_device_control
create_loop_devices 256

<% if !p("garden.deprecated_use_garden_shed") && p("garden.image_plugin", "") == "" %>
${BASE_PATH}/<%= p("grootfs.driver") %>-setup
<% end %>

<% if p("garden.apparmor_profile") == "garden-default" %>
  load_apparmor_profile "$GARDEN_CONFIG_DIR"/garden-default
<% end %>

if ! echo madvise > /sys/kernel/mm/transparent_hugepage/enabled ; then
  echo "Could not disable automatic transparent hugepage allocation. This is normal in bosh lite."
fi

echo 1 > /proc/sys/kernel/dmesg_restrict

ulimit -n 65536
echo 4194304 > /proc/sys/kernel/pid_max
ulimit -u unlimited

exec 1> >( tee -a $LOG_DIR/garden.stdout.log | logger -p user.info -t vcap.garden ) \
     2> >( tee -a $LOG_DIR/garden.stderr.log | logger -p user.error -t vcap.garden )

groot_config_dir="$GARDEN_CONFIG_DIR"
exec_command="exec"
setup_cmd="/var/vcap/packages/guardian/bin/gdn setup"
id_map_start=1
<% if p("garden.experimental_rootless_mode") %>
  <% if p("garden.listen_network") == "tcp" %>
    exec_command="exec execas --uid $MAXIMUS --gid $MAXIMUS"
  <% else %>
    exec_command="exec socket2me --socket-path <%= p("garden.listen_address") %> --uid $MAXIMUS --gid $MAXIMUS --socket-uid 1000 --socket-gid 1000"
  <% end %>
  setup_cmd="$setup_cmd --rootless-uid $MAXIMUS --rootless-gid $MAXIMUS"
  id_map_start=65536

  # runc makes use of the XDG_RUNTIME_DIR env var in order to determine
  # where to place the runc root dir in rootless mode.
  # Given that this is not set on stemcells we choose to set it explicitely
  # here.
  export XDG_RUNTIME_DIR=/var/run/user/$MAXIMUS
  export TMPDIR=$TMPDIR/user/$MAXIMUS/tmp

  mkdir -p $XDG_RUNTIME_DIR $TMPDIR
  chmod 700 $XDG_RUNTIME_DIR
  chown "$MAXIMUS:$MAXIMUS" $LOG_DIR $TMPDIR $DEPOT_PATH $XDG_RUNTIME_DIR

  groot_config_dir="$GARDEN_DIR/config"
  mkdir -p $groot_config_dir
  cp "$GARDEN_CONFIG_DIR/grootfs_config.yml" $groot_config_dir
  chmod o+r $groot_config_dir/grootfs_config.yml
<% end %>

$setup_cmd

echo $$ > $PIDFILE
$exec_command /var/vcap/packages/guardian/bin/gdn \
server --skip-setup \
<% if p("garden.listen_network") == "tcp" %> \
<% ip, port = p("garden.listen_address").split(":") %> \
  --bind-ip=<%= ip %> \
  --bind-port=<%= port %> \
<% else %> \
  --bind-socket=<%= p("garden.listen_address") %> \
<% end %> \
  --depot=$DEPOT_PATH \
  --properties-path=/var/vcap/data/garden/props.json \
  --port-pool-properties-path=/var/vcap/data/garden/port-pool-props.json \
  --iptables-bin=/var/vcap/packages/iptables/sbin/iptables \
  --iptables-restore-bin=/var/vcap/packages/iptables/sbin/iptables-restore \
  --init-bin="$RUNTIME_BIN_DIR/init" \
  --dadoo-bin=/var/vcap/packages/guardian/bin/dadoo \
  --nstar-bin=/var/vcap/packages/guardian/bin/nstar \
  --tar-bin=/var/vcap/packages/tar/tar \
  --log-level=<%= p("garden.log_level") %> \
  --mtu=<%= p("garden.network_mtu") %> \
  --network-pool=<%= p("garden.network_pool") %> \
<% p("garden.deny_networks").each do |network| %> \
  --deny-network=<%= network %> \
<% end %> \
<% if p("garden.destroy_containers_on_start") %> \
  --destroy-containers-on-startup \
<% end %> \
<% if p("garden.allow_host_access") %> \
  --allow-host-access \
<% end %> \
<% if_p("garden.containerd_socket") do |containerd_socket| %> \
  --containerd-socket=<%= containerd_socket %> \
<% end %> \
<% if_p("garden.debug_listen_address") do |debug_listen_address| %> \
  <% debug_ip, debug_port = debug_listen_address.split(":") %> \
  --debug-bind-ip=<%= debug_ip %> \
  --debug-bind-port=<%= debug_port %> \
<% end %> \
  --default-rootfs=<%= p("garden.default_container_rootfs") %> \
  --default-grace-time=<%= p("garden.default_container_grace_time") %> \
  --default-container-blockio-weight=<%= p("garden.default_container_blockio_weight") %> \
<% if p("garden.deprecated_use_garden_shed") %> \
  --graph-cleanup-threshold-in-megabytes=<%= p("garden.graph_cleanup_threshold_in_mb") %> \
<% end %> \
<% if_p("garden.max_containers") do |max_containers| %> \
  --max-containers=<%= max_containers %> \
<% end %> \
<% if_p("garden.cpu_quota_per_share_in_us") do |quota_per_share| %> \
  --cpu-quota-per-share=<%= quota_per_share %> \
<% end %> \
<% if_p("garden.experimental_tcp_mem_limit_in_bytes") do |tcp_memory| %> \
  --tcp-memory-limit=<%= tcp_memory %> \
<% end %> \
  --runtime-plugin=<%= p("garden.runtime_plugin", "/var/vcap/packages/runc/bin/runc") %> \
<% if_p("garden.image_plugin") do |plugin| %> \
  --image-plugin=<%= plugin %> \
  <% p("garden.image_plugin_extra_args").each do |arg| %> \
  --image-plugin-extra-arg=<%= arg %> \
  <% end %> \
<% end %> \
<% if_p("garden.privileged_image_plugin") do |plugin| %> \
  --privileged-image-plugin=<%= plugin %> \
  <% p("garden.privileged_image_plugin_extra_args").each do |arg| %> \
  --privileged-image-plugin-extra-arg=<%= arg %> \
  <% end %> \
<% end %> \
<% if p("garden.image_plugin", "") == "" %> \
  <% if p("garden.deprecated_use_garden_shed") %> \
  --graph=$GRAPH_PATH \
  <% else %> \
  --image-plugin=/var/vcap/packages/grootfs/bin/grootfs \
  --image-plugin-extra-arg="--config" \
  --image-plugin-extra-arg=$groot_config_dir/grootfs_config.yml \
  <% end %> \
<% end %> \
<% if p("garden.privileged_image_plugin", "") == "" %> \
<% if !p("garden.deprecated_use_garden_shed") && !p("garden.experimental_rootless_mode") %> \
  --privileged-image-plugin=/var/vcap/packages/grootfs/bin/grootfs \
  --privileged-image-plugin-extra-arg="--config" \
  --privileged-image-plugin-extra-arg=$groot_config_dir/privileged_grootfs_config.yml \
<% end %> \
<% end %> \
<% if_p("garden.network_plugin") do |plugin| %> \
  --network-plugin=<%= plugin %> \
  <% p("garden.network_plugin_extra_args").each do |arg| %> \
  --network-plugin-extra-arg=<%= arg %> \
  <% end %> \
<% end %> \
<% if_p("garden.docker_registry_endpoint") do |endpoint| %> \
  --docker-registry=<%= endpoint %> \
<% end %> \
<% if_p("garden.dropsonde.origin") do |origin| %> \
  --dropsonde-origin=<%= origin %> \
<% end %> \
<% if_p("garden.dropsonde.destination") do |destination| %> \
  --dropsonde-destination=<%= destination %> \
<% end %> \
<% if_p("garden.port_pool.start") do |start| %> \
  --port-pool-start=<%= start %> \
<% end %> \
<% if_p("garden.port_pool.size") do |size| %> \
  --port-pool-size=<%= size %> \
<% end %> \
<% if p("garden.deprecated_use_garden_shed") %> \
<% p("garden.insecure_docker_registry_list").each do |url| %> \
  --insecure-docker-registry=<%= url %> \
<% end %> \
<% end %> \
<% p("garden.persistent_image_list").each do |url| %> \
  --persistent-image=<%= url %> \
<% end %> \
<% p("garden.dns_servers").each do |server| %> \
  --dns-server=<%= server %> \
<% end %> \
<% p("garden.additional_dns_servers").each do |server| %> \
  --additional-dns-server=<%= server %> \
<% end %> \
<% p("garden.additional_host_entries").each do |host_entry| %> \
  --additional-host-entry="<%= host_entry %>" \
<% end %> \
<% if !p("garden.apparmor_profile").empty? %> \
  --apparmor=<%= p("garden.apparmor_profile") %> \
<% end %> \
<% if p("garden.cleanup_process_dirs_on_wait") %> \
  --cleanup-process-dirs-on-wait \
<% end %> \
<% if p("garden.experimental_rootless_mode") %> \
  --disable-privileged-containers \
<% end %> \
--uid-map-start="$id_map_start" \
--uid-map-length=$((MAXIMUS-id_map_start)) \
--gid-map-start="$id_map_start" \
--gid-map-length=$((MAXIMUS-id_map_start))
